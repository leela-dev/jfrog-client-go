valuesFilePath: ./values.yml

resources:
  - name: jfrogClientGoRepoOnlyOnCommit
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.gitIntegration }}
      path: {{ .Values.repoPath }}
      branches:
        include: dev
      buildOn:
        commit: true

  - name: jfrogClientGoRepoOnlyOnPR
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.gitIntegration }}
      path: {{ .Values.repoPath }}
      branches:
        include: dev
      buildOn:
        commit: false
        pullRequestCreate: true

  - name: jfrogClientGoRepoPushAndPR
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.gitIntegration }}
      path: {{ .Values.repoPath }}
      branches:
        include: ^{{gitBranch}}$
      buildOn:
        commit: true
        pullRequestCreate: true
pipelines:
  - name: jfrog_goclient
    configuration:
      jfrogCliVersion: 2
      runtime:
        type: image
        image:
          custom:
            name: releases-docker.jfrog.io/jfrog/pipelines-u18node
            tag: "16"
            autoPull: true
      environmentVariables:
        readOnly:
          RESOLVE_REPO: npm-virtual
    steps:
      - name: trigger_all
        type: Bash
        execution:
          onExecute:
            - echo "Starting pipeline run..."
      - name: static_code_analysis
        type: Bash
        configuration:
          integrations:
            - name: int_default_artifactory
          inputSteps:
            - name: trigger_all
          inputResources:
            - name: jfrogClientGoRepoPushAndPR
        execution:
          onStart:
            - task: jfrog/setup-go@v0.0.2
              input:
                version: "1.19.3"
                cacheIntegration: int_default_artifactory
            - go version
            - go env GOPATH
          onExecute:
            - go env GOPATH
            - task: jfrog/go-static-check@v0.0.1
              id: go_staticcheck
              input:
                sourcePath: $res_jfrogClientGoRepoPushAndPR_resourcePath
      - name: go_sec
        type: Bash
        configuration:
          integrations:
            - name: int_default_artifactory
          inputResources:
            - name: jfrogClientGoRepoPushAndPR
          inputSteps:
            - name: trigger_all
        execution:
          onStart:
            - task: jfrog/setup-go@v0.0.2
              input:
                version: "1.19.3"
                cacheIntegration: int_default_artifactory
            - go version
            - go env GOPATH
          onExecute:
            - curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
            - cd $res_jfrogClientGoRepoPushAndPR_resourcePath
            - gosec -exclude=G204,G301,G302,G304,G306 -exclude-dir=\.*test\.* ./...
      - name: Frogbot_Fix
        type: Bash
        configuration:
          integrations:
            - name: jfrogPlatform
            - name: LeelaGitHub
            - name: int_default_artifactory
          inputResources:
            - name: jfrogClientGoRepoOnlyOnCommit
          inputSteps:
            - name: trigger_all
        execution:
          onStart:
            - task: jfrog/setup-go@v0.0.2
              input:
                version: "1.19.3"
                cacheIntegration: int_default_artifactory
            - go version
            - go env GOPATH
          onExecute:
            # Run frogbot task
            - task: frogbot@v0.0.1
              id: frogbot_test
              input:
                # full repository name
                repository: "leela-dev/jfrog-client-go"
                # integration name for access token of platform
                platformAccessTokenIntegration: "jfrogPlatform"
                # integration for git token to access git server provider
                resourceName: "jfrogClientGoRepoOnlyOnCommit"
                # action to be done by frogbot
                botAction: "create-fix-pull-requests"
      - name: Frogbot_Scan_PR
        type: Bash
        configuration:
          requiresApproval: true
          inputSteps:
            - name: trigger_all
          integrations:
            - name: jfrogPlatform
            - name: LeelaGitHub
            - name: int_default_artifactory
          inputResources:
            - name: jfrogClientGoRepoOnlyOnPR
        execution:
          onStart:
            - task: jfrog/setup-go@v0.0.2
              input:
                version: "1.19.3"
                cacheIntegration: int_default_artifactory
            - go version
            - go env GOPATH
          onExecute:
            # Run frogbot task
            - task: frogbot@v0.0.1
              id: frogbot_test
              input:
                # full repository name
                repository: "leela-dev/jfrog-client-go"
                # integration name for access token of platform
                platformAccessTokenIntegration: "jfrogPlatform"
                # integration for git token to access git server provider
                resourceName: "jfrogClientGoRepoOnlyOnPR"
                # action to be done by frogbot
                botAction: "scan-pull-request"
      - name: lint
        type: Bash
        configuration:
          integrations:
            - name: int_default_artifactory
            - name: EcoSysSecrets
          inputResources:
            - name: jfrogClientGoRepoOnlyOnPR
          inputSteps:
            - name: trigger_all
        execution:
          onStart:
            - task: jfrog/setup-go@v0.0.2
              input:
                version: "1.19.3"
                cacheIntegration: int_default_artifactory
            - go version
            - go env GOPATH
          onExecute:
            - cd $res_jfrogClientGoRepoOnlyOnPR_resourcePath
            - go vet -v ./...
      - name: artifactory_tests
        type: Matrix
        stepMode: Bash
        configuration:
          environmentVariables:
            JF_URL: $int_int_default_artifactory_url
            RTLIC: $int_EcoSysSecrets_RTLIC
            GOPROXY: direct
          integrations:
            - name: int_default_artifactory
            - name: EcoSysSecrets
          inputResources:
            - name: jfrogClientGoRepoOnlyOnPR
          inputSteps:
            - name: lint
          multiNode: true
        stepletMultipliers:
          nodePools:
            - default-dynamic-nodepool
            - windows_dynamic
        execution:
          onStart:
            - task: jfrog/setup-go@v0.0.2
              input:
                version: "1.19.3"
                cacheIntegration: int_default_artifactory
            - go version
            - go env GOPATH
          onExecute:
            - cd $res_jfrogClientGoRepoOnlyOnPR_resourcePath
            - go install github.com/jfrog/jfrog-testing-infra/local-rt-setup@latest
            - ~/go/bin/local-rt-setup
            - go test -v github.com/jfrog/jfrog-client-go/tests --timeout 0 --test.artifactory --ci.runId=${operating_system}-artifactory
      - name: ds_xr_access_tests
        type: Matrix
        stepMode: Bash
        configuration:
          environmentVariables:
            JF_URL: $int_int_default_artifactory_url
            GOPROXY: direct
          integrations:
            - name: jfrogPlatform
            - name: int_default_artifactory
          inputResources:
            - name: jfrogClientGoRepoOnlyOnPR
          inputSteps:
            - name: lint
          multiNode: true
        stepletMultipliers:
          nodePools:
            - default-dynamic-nodepool
            - windows_dynamic
          environmentVariables:
            - suite : distribution
            - suite : xray
            - suite : access
        execution:
          onStart:
            - task: jfrog/setup-go@v0.0.2
              input:
                version: "1.19.3"
                cacheIntegration: int_default_artifactory
            - go version
            - go env GOPATH
          onExecute:
            - cd $res_jfrogClientGoRepoOnlyOnPR_resourcePath
            - add_run_variables HOST_URL="$(echo $int_int_default_artifactory_url | sed -r 's#([^/])/[^/].*#\1#')"
            - go test -v github.com/jfrog/jfrog-client-go/tests --timeout 0 --test.${suite} --rt.url=$int_int_default_artifactory_url --ds.url=$HOST_URL/distribution --xr.url=$HOST_URL/xray --access.url=$HOST_URL/access --rt.user=$int_int_default_artifactory_user --rt.password=$int_int_default_artifactory_apikey --access.token=$int_jfrogPlatform_accessToken --ci.runId=${operating_system}-${suite}
      - name: pipeline_tests
        type: Bash
        configuration:
          environmentVariables:
            JF_URL: $int_int_default_artifactory_url
            GOPROXY: direct
          integrations:
            - name: jfrogPlatform
            - name: int_default_artifactory
          inputResources:
            - name: jfrogClientGoRepoOnlyOnPR
          inputSteps:
            - name: lint
          nodePool: default-dynamic-nodepool
        execution:
          onStart:
            - task: jfrog/setup-go@v0.0.2
              input:
                version: "1.19.3"
                cacheIntegration: int_default_artifactory
            - go version
            - go env GOPATH
          onExecute:
            - cd $res_jfrogClientGoRepoOnlyOnPR_resourcePath
            - add_run_variables HOST_URL="$(echo $int_int_default_artifactory_url | sed -r 's#([^/])/[^/].*#\1#')"
            - go test -v github.com/jfrog/jfrog-client-go/tests --timeout 0 --test.pipelines --rt.url=$int_int_default_artifactory_url --pipe.url=$HOST_URL/pipelines --rt.user=$int_int_default_artifactory_user --rt.password=$int_int_default_artifactory_apikey --pipe.accessToken=$int_jfrogPlatform_accessToken --pipe.vcsToken=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 --pipe.vcsRepo=$res_jfrogClient_gitRepoFullName --pipe.vcsBranch=$res_jfrogClientGoRepoOnlyOnPR_branchName --ci.runId=${operating_system}_pipe
      - name: jfrog_client_go_repositories_tests
        type: Bash
        configuration:
          integrations:
            - name: int_default_artifactory
            - name: EcoSysSecrets
          inputResources:
            - name: jfrogClientGoRepoOnlyOnPR
          inputSteps:
            - name: lint
          environmentVariables:
            JF_URL: $int_int_default_artifactory_url
            GOPROXY: direct
            RTLIC: $int_EcoSysSecrets_RTLIC
          nodePool: default-dynamic-nodepool
        execution:
          onStart:
            - task: jfrog/setup-go@v0.0.2
              input:
                version: "1.19.3"
                cacheIntegration: int_default_artifactory
            - go version
            - go env GOPATH
          onExecute:
            - cd $res_jfrogClientGoRepoOnlyOnPR_resourcePath
            - add_run_variables HOST_URL="$(echo $int_int_default_artifactory_url | sed -r 's#([^/])/[^/].*#\1#')"
            - go install github.com/jfrog/jfrog-testing-infra/local-rt-setup@latest
            - ~/go/bin/local-rt-setup
            - go test -v github.com/jfrog/jfrog-client-go/tests --timeout 0 --test.repositories



